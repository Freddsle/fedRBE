flimmaBatchCorrection:
  data_filename: "lab_A_protein_groups_matrix.tsv"
    # the file containing the expression data/data to be batch corrected.
  design_filename: lab_A_design.tsv  # the file containing covariates
                                     # it is read in the following way:
                                     # pd.read_csv(design_file_path, sep=seperator, index_col=0)
                                     # should therefore be in the format samples x covariates
                                     # with the first column being the sample indices
                                     # the order of the samples should be the same than in the data file
  batch_col: "" # the column name of the batch information in the design file
                # if left empty, the client is assumed to contain only one batch
                # Must contain the same unique values for the same batch
                # For technical reasons, cannot contain the character "|" (hex: 0xA6)
                # format: str
  expression_file_flag: True # If true, the datafile is expected to have the samples as columns
                             # and the features as rows. If false, the datafile is expected to have
                             # the samples as rows and the features as columns.
                             # format: boolean
  index_col: "sample" # if expression_file_flag is true, the index_col is the column name of the
                      # features in the data file.
                      # If expression_file_flag is false, the index_col
                      # is the column name of the samples in the data file.
                      # if no index_col is given, the index is taken from the 0th column for
                      # expression files and generated automatically for samples x features datafiles
                      # in the design file, the 0th column is always used as the index
                      # format: str or int, int is interpreted as the column index (starting from 0)
  covariates: ['Pyr'] # covariates in linear model. In case a design matrix is given
                      # they are expected in the design matrix, otherwise they are expected
                      # to be features in the given data (in the data_filename file).
                      # format: list of strings
  separator: "\t" # the separator used in the annotation or data file
  design_separator: "\t" # the separator used in the design file
  normalizationMethod: "log2(x+1)" # the method used for normalization, supported:
                                   # "log2(x+1)"
                                   # if None is given, doesn't the app doesn't normalize
  # The following options are for privacy, we recommend one of these tiers:
  # minimum privacy:
  #   smpc = False, min_samples = 0
  # medium privacy, medium slowdown
  #   smpc = True, min_samples = 0
  # maximum privacy, medium to high slowdown
  #   smpc = True, min_samples = 5
  # We recommend at least medium privacy when using covariates and maximum
  # privacy if the data contains a lot of missing values
  # With min samples > 0, the program might halt depending on the given data
  smpc: True     # whether to use secure multi party computation to securely
                 # aggregate information sent from clients to the coordinator
                 # for more information see https://featurecloud.ai/assets/developer_documentation/privacy_preserving_techniques.html#smpc-secure-multiparty-computation
  min_samples: 5 # The minimum number of samples per feature that are required
                 # to be present and non-missing.
                 # if for a feature less than min_samples samples are present,
                 # the client will not send any information about that feature
                 # format: int
                 # Please not that the actual used min_samples might be different
                 # as for privacy reasons min_samples = max(min_samples, len(design.columns))
                 # This is to ensure that a sent Xty matrix always has more samples
                 # than features so that neither X not y can be reconstructed from the Xty matrix
  position: 1    # if a number x is given, the order of the clients will be
                 # be determined by sorting after this number x.
                 # Example:
                 # Client1 -> position : 0, Client2 -> position: 5, Client3 -> position: 2
                 # Order -> Client1, Client3, Client2
                 # The last client in that order is always used as the reference
                 # batch, so in this case Client2
                 # if empty/None, the order is random, making the batch correction
                 # run non deterministic